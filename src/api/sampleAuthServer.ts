/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Sample Auth-Server
 * OpenAPI spec version: v1
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  UserResource,
  ModifyingUserResource,
  BookResource,
  CollectionModelBookResource
} from './generated'


export const getUser = (
    userId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserResource>> => {
    return axios.get(
      `/v1/users/${userId}`,options
    );
  }


export const getGetUserQueryKey = (userId: string,) => [`/v1/users/${userId}`] as const;
  

    
export const getGetUserQueryOptions = <TData = Awaited<ReturnType<typeof getUser>>, TError = AxiosError<unknown>>(userId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserQueryKey(userId);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUser>>> = ({ signal }) => getUser(userId, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions}}

export type GetUserQueryResult = NonNullable<Awaited<ReturnType<typeof getUser>>>
export type GetUserQueryError = AxiosError<unknown>

export const useGetUser = <TData = Awaited<ReturnType<typeof getUser>>, TError = AxiosError<unknown>>(
 userId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUserQueryOptions(userId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const updateUser = (
    userId: string,
    modifyingUserResource: ModifyingUserResource, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserResource>> => {
    return axios.put(
      `/v1/users/${userId}`,
      modifyingUserResource,options
    );
  }



export const getUpdateUserMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUser>>, TError,{userId: string;data: ModifyingUserResource}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateUser>>, TError,{userId: string;data: ModifyingUserResource}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateUser>>, {userId: string;data: ModifyingUserResource}> = (props) => {
          const {userId,data} = props ?? {};

          return  updateUser(userId,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UpdateUserMutationResult = NonNullable<Awaited<ReturnType<typeof updateUser>>>
    export type UpdateUserMutationBody = ModifyingUserResource
    export type UpdateUserMutationError = AxiosError<unknown>

    export const useUpdateUser = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUser>>, TError,{userId: string;data: ModifyingUserResource}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getUpdateUserMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const deleteUser = (
    userId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `/v1/users/${userId}`,options
    );
  }



export const getDeleteUserMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUser>>, TError,{userId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteUser>>, TError,{userId: string}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUser>>, {userId: string}> = (props) => {
          const {userId} = props ?? {};

          return  deleteUser(userId,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteUserMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUser>>>
    
    export type DeleteUserMutationError = AxiosError<unknown>

    export const useDeleteUser = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUser>>, TError,{userId: string}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getDeleteUserMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const getBookById = (
    bookId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<BookResource>> => {
    return axios.get(
      `/v1/books/${bookId}`,options
    );
  }


export const getGetBookByIdQueryKey = (bookId: string,) => [`/v1/books/${bookId}`] as const;
  

    
export const getGetBookByIdQueryOptions = <TData = Awaited<ReturnType<typeof getBookById>>, TError = AxiosError<unknown>>(bookId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getBookById>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getBookById>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBookByIdQueryKey(bookId);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBookById>>> = ({ signal }) => getBookById(bookId, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(bookId), ...queryOptions}}

export type GetBookByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getBookById>>>
export type GetBookByIdQueryError = AxiosError<unknown>

export const useGetBookById = <TData = Awaited<ReturnType<typeof getBookById>>, TError = AxiosError<unknown>>(
 bookId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getBookById>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetBookByIdQueryOptions(bookId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const updateBook = (
    bookId: string,
    bookResource: BookResource, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<BookResource>> => {
    return axios.put(
      `/v1/books/${bookId}`,
      bookResource,options
    );
  }



export const getUpdateBookMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateBook>>, TError,{bookId: string;data: BookResource}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateBook>>, TError,{bookId: string;data: BookResource}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateBook>>, {bookId: string;data: BookResource}> = (props) => {
          const {bookId,data} = props ?? {};

          return  updateBook(bookId,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UpdateBookMutationResult = NonNullable<Awaited<ReturnType<typeof updateBook>>>
    export type UpdateBookMutationBody = BookResource
    export type UpdateBookMutationError = AxiosError<unknown>

    export const useUpdateBook = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateBook>>, TError,{bookId: string;data: BookResource}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getUpdateBookMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const deleteBook = (
    bookId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `/v1/books/${bookId}`,options
    );
  }



export const getDeleteBookMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteBook>>, TError,{bookId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteBook>>, TError,{bookId: string}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteBook>>, {bookId: string}> = (props) => {
          const {bookId} = props ?? {};

          return  deleteBook(bookId,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteBookMutationResult = NonNullable<Awaited<ReturnType<typeof deleteBook>>>
    
    export type DeleteBookMutationError = AxiosError<unknown>

    export const useDeleteBook = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteBook>>, TError,{bookId: string}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getDeleteBookMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const getAllUsers = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserResource[]>> => {
    return axios.get(
      `/v1/users`,options
    );
  }


export const getGetAllUsersQueryKey = () => [`/v1/users`] as const;
  

    
export const getGetAllUsersQueryOptions = <TData = Awaited<ReturnType<typeof getAllUsers>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllUsersQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllUsers>>> = ({ signal }) => getAllUsers({ signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetAllUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getAllUsers>>>
export type GetAllUsersQueryError = AxiosError<unknown>

export const useGetAllUsers = <TData = Awaited<ReturnType<typeof getAllUsers>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAllUsersQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const createUser = (
    modifyingUserResource: ModifyingUserResource, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserResource>> => {
    return axios.post(
      `/v1/users`,
      modifyingUserResource,options
    );
  }



export const getCreateUserMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError,{data: ModifyingUserResource}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError,{data: ModifyingUserResource}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUser>>, {data: ModifyingUserResource}> = (props) => {
          const {data} = props ?? {};

          return  createUser(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type CreateUserMutationResult = NonNullable<Awaited<ReturnType<typeof createUser>>>
    export type CreateUserMutationBody = ModifyingUserResource
    export type CreateUserMutationError = AxiosError<unknown>

    export const useCreateUser = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError,{data: ModifyingUserResource}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getCreateUserMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const getAllBooks = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CollectionModelBookResource>> => {
    return axios.get(
      `/v1/books`,options
    );
  }


export const getGetAllBooksQueryKey = () => [`/v1/books`] as const;
  

    
export const getGetAllBooksQueryOptions = <TData = Awaited<ReturnType<typeof getAllBooks>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAllBooks>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getAllBooks>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllBooksQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllBooks>>> = ({ signal }) => getAllBooks({ signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetAllBooksQueryResult = NonNullable<Awaited<ReturnType<typeof getAllBooks>>>
export type GetAllBooksQueryError = AxiosError<unknown>

export const useGetAllBooks = <TData = Awaited<ReturnType<typeof getAllBooks>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAllBooks>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAllBooksQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const createBook = (
    bookResource: BookResource, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<BookResource>> => {
    return axios.post(
      `/v1/books`,
      bookResource,options
    );
  }



export const getCreateBookMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createBook>>, TError,{data: BookResource}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createBook>>, TError,{data: BookResource}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createBook>>, {data: BookResource}> = (props) => {
          const {data} = props ?? {};

          return  createBook(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type CreateBookMutationResult = NonNullable<Awaited<ReturnType<typeof createBook>>>
    export type CreateBookMutationBody = BookResource
    export type CreateBookMutationError = AxiosError<unknown>

    export const useCreateBook = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createBook>>, TError,{data: BookResource}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getCreateBookMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const returnBookById = (
    bookId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<BookResource>> => {
    return axios.post(
      `/v1/books/${bookId}/return`,undefined,options
    );
  }



export const getReturnBookByIdMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof returnBookById>>, TError,{bookId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof returnBookById>>, TError,{bookId: string}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof returnBookById>>, {bookId: string}> = (props) => {
          const {bookId} = props ?? {};

          return  returnBookById(bookId,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type ReturnBookByIdMutationResult = NonNullable<Awaited<ReturnType<typeof returnBookById>>>
    
    export type ReturnBookByIdMutationError = AxiosError<unknown>

    export const useReturnBookById = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof returnBookById>>, TError,{bookId: string}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getReturnBookByIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const borrowBookById = (
    bookId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<BookResource>> => {
    return axios.post(
      `/v1/books/${bookId}/borrow`,undefined,options
    );
  }



export const getBorrowBookByIdMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof borrowBookById>>, TError,{bookId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof borrowBookById>>, TError,{bookId: string}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof borrowBookById>>, {bookId: string}> = (props) => {
          const {bookId} = props ?? {};

          return  borrowBookById(bookId,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type BorrowBookByIdMutationResult = NonNullable<Awaited<ReturnType<typeof borrowBookById>>>
    
    export type BorrowBookByIdMutationError = AxiosError<unknown>

    export const useBorrowBookById = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof borrowBookById>>, TError,{bookId: string}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getBorrowBookByIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
