/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Sample Auth-Server
 * OpenAPI spec version: v1
 */
import getUserMutator from './axios';
import updateUserMutator from './axios';
import deleteUserMutator from './axios';
import getBookByIdMutator from './axios';
import updateBookMutator from './axios';
import deleteBookMutator from './axios';
import getAllUsersMutator from './axios';
import createUserMutator from './axios';
import getAllBooksMutator from './axios';
import createBookMutator from './axios';
import returnBookByIdMutator from './axios';
import borrowBookByIdMutator from './axios';
export type ModifyingUserResourceRolesItem = typeof ModifyingUserResourceRolesItem[keyof typeof ModifyingUserResourceRolesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModifyingUserResourceRolesItem = {
  LIBRARY_USER: 'LIBRARY_USER',
  LIBRARY_CURATOR: 'LIBRARY_CURATOR',
  LIBRARY_ADMIN: 'LIBRARY_ADMIN',
} as const;

export interface Link {
  rel?: string;
  href?: string;
  hreflang?: string;
  media?: string;
  title?: string;
  type?: string;
  deprecation?: string;
  profile?: string;
  name?: string;
}

export interface CollectionModelBookResource {
  links?: Link[];
  content?: BookResource[];
}

export interface UserResource {
  identifier?: string;
  email: string;
  firstName: string;
  lastName: string;
  links?: Link[];
}

export interface BookResource {
  identifier?: string;
  isbn: string;
  title: string;
  description: string;
  authors: string[];
  borrowed?: boolean;
  borrowedBy?: UserResource;
  links?: Link[];
}

export interface ModifyingUserResource {
  identifier?: string;
  email: string;
  firstName: string;
  lastName: string;
  password: string;
  roles?: ModifyingUserResourceRolesItem[];
  links?: Link[];
}




// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;


  export const getUser = (
    userId: string,
 options?: SecondParameter<typeof getUserMutator>,) => {
      return getUserMutator<UserResource>(
      {url: `/v1/users/${userId}`, method: 'get'
    },
      options);
    }
  
export const updateUser = (
    userId: string,
    modifyingUserResource: ModifyingUserResource,
 options?: SecondParameter<typeof updateUserMutator>,) => {
      return updateUserMutator<UserResource>(
      {url: `/v1/users/${userId}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: modifyingUserResource
    },
      options);
    }
  
export const deleteUser = (
    userId: string,
 options?: SecondParameter<typeof deleteUserMutator>,) => {
      return deleteUserMutator<void>(
      {url: `/v1/users/${userId}`, method: 'delete'
    },
      options);
    }
  
export const getBookById = (
    bookId: string,
 options?: SecondParameter<typeof getBookByIdMutator>,) => {
      return getBookByIdMutator<BookResource>(
      {url: `/v1/books/${bookId}`, method: 'get'
    },
      options);
    }
  
export const updateBook = (
    bookId: string,
    bookResource: BookResource,
 options?: SecondParameter<typeof updateBookMutator>,) => {
      return updateBookMutator<BookResource>(
      {url: `/v1/books/${bookId}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: bookResource
    },
      options);
    }
  
export const deleteBook = (
    bookId: string,
 options?: SecondParameter<typeof deleteBookMutator>,) => {
      return deleteBookMutator<void>(
      {url: `/v1/books/${bookId}`, method: 'delete'
    },
      options);
    }
  
export const getAllUsers = (
    
 options?: SecondParameter<typeof getAllUsersMutator>,) => {
      return getAllUsersMutator<UserResource[]>(
      {url: `/v1/users`, method: 'get'
    },
      options);
    }
  
export const createUser = (
    modifyingUserResource: ModifyingUserResource,
 options?: SecondParameter<typeof createUserMutator>,) => {
      return createUserMutator<UserResource>(
      {url: `/v1/users`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: modifyingUserResource
    },
      options);
    }
  
export const getAllBooks = (
    
 options?: SecondParameter<typeof getAllBooksMutator>,) => {
      return getAllBooksMutator<CollectionModelBookResource>(
      {url: `/v1/books`, method: 'get'
    },
      options);
    }
  
export const createBook = (
    bookResource: BookResource,
 options?: SecondParameter<typeof createBookMutator>,) => {
      return createBookMutator<BookResource>(
      {url: `/v1/books`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: bookResource
    },
      options);
    }
  
export const returnBookById = (
    bookId: string,
 options?: SecondParameter<typeof returnBookByIdMutator>,) => {
      return returnBookByIdMutator<BookResource>(
      {url: `/v1/books/${bookId}/return`, method: 'post'
    },
      options);
    }
  
export const borrowBookById = (
    bookId: string,
 options?: SecondParameter<typeof borrowBookByIdMutator>,) => {
      return borrowBookByIdMutator<BookResource>(
      {url: `/v1/books/${bookId}/borrow`, method: 'post'
    },
      options);
    }
  
export type GetUserResult = NonNullable<Awaited<ReturnType<typeof getUser>>>
export type UpdateUserResult = NonNullable<Awaited<ReturnType<typeof updateUser>>>
export type DeleteUserResult = NonNullable<Awaited<ReturnType<typeof deleteUser>>>
export type GetBookByIdResult = NonNullable<Awaited<ReturnType<typeof getBookById>>>
export type UpdateBookResult = NonNullable<Awaited<ReturnType<typeof updateBook>>>
export type DeleteBookResult = NonNullable<Awaited<ReturnType<typeof deleteBook>>>
export type GetAllUsersResult = NonNullable<Awaited<ReturnType<typeof getAllUsers>>>
export type CreateUserResult = NonNullable<Awaited<ReturnType<typeof createUser>>>
export type GetAllBooksResult = NonNullable<Awaited<ReturnType<typeof getAllBooks>>>
export type CreateBookResult = NonNullable<Awaited<ReturnType<typeof createBook>>>
export type ReturnBookByIdResult = NonNullable<Awaited<ReturnType<typeof returnBookById>>>
export type BorrowBookByIdResult = NonNullable<Awaited<ReturnType<typeof borrowBookById>>>
